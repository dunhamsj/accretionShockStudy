#!/usr/bin/env python3

from sys import argv
import numpy as np
import matplotlib.pyplot as plt
plt.style.use( 'publication.sty' )

from UtilitiesModule import GetFileArray, GetData
from globalVariables import *

Mpns_s = argv[1]
Mpns = np.float64( Mpns_s )

if  ( Mpns == 1.4 ):
    Rsh = np.array( [    '1.20e2',    '1.50e2',    '1.75e2' ], str )
    lab = np.array( [ 'Rsh1.20e2', 'Rsh1.50e2', 'Rsh1.75e2' ], str )
elif( Mpns == 2.8 ):
    Rsh = np.array( [    '6.00e1',    '7.00e1' ], str )
    lab = np.array( [ 'Rsh6.00e1', 'Rsh7.00e1' ], str )

IDs = [ '1D_M{:.1f}_Rpns003_Rs{:}'.format( Mpns, r ) for r in Rsh ]

IDs = np.array( IDs, dtype = str )
Rsh = np.array( np.float64( Rsh ), dtype = np.int64 )

def generateData():

    header = 'Generated by compareIC_NRvsGR.py'
    header_rho = header + '\nX1_C [km]\nrho_C [g/cm^3]'
    header_p   = header + '\nX1_C [km]\np_C [erg/cm^3]'
    header_v   = header + '\nX1_C [km]\nv_C [km/s]'
    header_a   = header + '\nX1_C [km]\nalpha []'
    header_phi = header + '\nX1_C [km]\nPhi [erg/g]'

    i = -1
    for r in range( Rsh.shape[0] ):

        rootDirectory = plotfileRootDirectory + '1D/'

        plotFileBaseName_GR = 'GR' + IDs[r] + '.plt'
        plotFileBaseName_NR = 'NR' + IDs[r] + '.plt'

        plotFileArray_GR \
          = GetFileArray( rootDirectory, plotFileBaseName_GR )
        plotFileArray_NR \
          = GetFileArray( rootDirectory, plotFileBaseName_NR )

        rho_GR, dataUnits, X1, X2, X3, dX1, dX2, dX3, xL, xH, nX, time \
          = GetData( rootDirectory, plotFileBaseName_GR, 'PF_D', \
                    'spherical', True, \
                    ReturnTime = True, ReturnMesh = True, Verbose = False )
        rho_GR = np.copy( rho_GR[:,0,0] )
        X1     = np.copy( X1    [:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_PF_D.dat'.format( plotFileBaseName_GR[:-4] ), \
                    np.vstack( ( X1, rho_GR ) ), header = header_rho )

        rho_NR, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_NR, 'PF_D', \
                    'spherical', True )
        rho_NR = np.copy( rho_NR[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_PF_D.dat'.format( plotFileBaseName_NR[:-4] ), \
                    np.vstack( ( X1, rho_NR ) ), header = header_rho )


        p_GR, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_GR, 'AF_P', \
                    'spherical', True )
        p_GR = np.copy( p_GR[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_AF_P.dat'.format( plotFileBaseName_GR[:-4] ), \
                    np.vstack( ( X1, p_GR ) ), header = header_p )

        p_NR, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_NR, 'AF_P', \
                    'spherical', True )
        p_NR = np.copy( p_NR[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_AF_P.dat'.format( plotFileBaseName_NR[:-4] ), \
                    np.vstack( ( X1, p_NR ) ), header = header_p )

        v_GR, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_GR, 'PF_V1', \
                    'spherical', True )
        v_GR = np.copy( v_GR[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_PF_V1.dat'.format( plotFileBaseName_GR[:-4] ), \
                    np.vstack( ( X1, v_GR ) ), header = header_v )

        v_NR, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_NR, 'PF_V1', \
                    'spherical', True )
        v_NR = np.copy( v_NR[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_PF_V1.dat'.format( plotFileBaseName_NR[:-4] ), \
                    np.vstack( ( X1, v_NR ) ), header = header_v )

        alpha, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_GR, 'GF_Alpha', \
                    'spherical', True )
        alpha = np.copy( alpha[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_GF_Alpha.dat'.format( plotFileBaseName_GR[:-4] ), \
                    np.vstack( ( X1, alpha ) ), header = header_a )

        Phi, dataUnits \
          = GetData( rootDirectory, plotFileBaseName_NR, 'GF_Phi_N', \
                    'spherical', True )
        Phi = np.copy( Phi[:,0,0] )
        np.savetxt( dataDirectory \
                      + '{:}_GF_Phi_N.dat'.format( plotFileBaseName_NR[:-4] ), \
                    np.vstack( ( X1, Phi ) ), header = header_phi )

    return

generateData()

### Plotting

nRows = 2
nCols = 2

ax00ylabel = r'$\rho/\rho_{1}$'
ax01ylabel = r'$v/v_{1}$'
ax10ylabel = r'$p/\left(\rho_{1}\,v_{1}^{2}\right)$'
ax11ylabel = r'$\alpha/\alpha_{1}$'

verbose = False

fig, axs = plt.subplots( nRows, nCols )

# colorblind-friendly palette: https://gist.github.com/thriveth/8560036
color = ['#377eb8', '#ff7f00', '#4daf4a', \
         '#f781bf', '#a65628', '#984ea3', \
         '#999999', '#e41a1c', '#dede00']

i = -1
for r in range( Rsh.shape[0] ):

    plotFileBaseName_GR = 'GR' + IDs[r] + '.plt'
    plotFileBaseName_NR = 'NR' + IDs[r] + '.plt'

    filename \
      = dataDirectory + '{:}_PF_D.dat'.format( plotFileBaseName_GR[:-4] )
    X1, rho_GR = np.loadtxt( filename )
    filename \
      = dataDirectory + '{:}_PF_D.dat'.format( plotFileBaseName_NR[:-4] )
    X1, rho_NR = np.loadtxt( filename )

    filename \
      = dataDirectory + '{:}_AF_P.dat'.format( plotFileBaseName_GR[:-4] )
    X1, p_GR = np.loadtxt( filename )
    filename \
      = dataDirectory + '{:}_AF_P.dat'.format( plotFileBaseName_NR[:-4] )
    X1, p_NR = np.loadtxt( filename )

    filename \
      = dataDirectory + '{:}_PF_V1.dat'.format( plotFileBaseName_GR[:-4] )
    X1, v_GR = np.loadtxt( filename )
    filename \
      = dataDirectory + '{:}_PF_V1.dat'.format( plotFileBaseName_NR[:-4] )
    X1, v_NR = np.loadtxt( filename )

    filename \
      = dataDirectory + '{:}_GF_Alpha.dat'.format( plotFileBaseName_GR[:-4] )
    X1, alpha = np.loadtxt( filename )
    filename \
      = dataDirectory + '{:}_GF_Phi_N.dat'.format( plotFileBaseName_NR[:-4] )
    X1, Phi = np.loadtxt( filename )

    etaGR = np.copy( X1 )
    etaNR = np.copy( X1 )

    indGR   = np.where( etaGR < 0.99 * Rsh[r] )[0]
    indGR_1 = np.where( etaGR > 1.00 * Rsh[r] )[0][0]

    indNR   = np.where( etaNR < 0.99 * Rsh[r] )[0]
    indNR_1 = np.where( etaNR > 1.00 * Rsh[r] )[0][0]

    v = np.copy( v_GR[indGR] )
    if   Mpns_s == '1.4':
        Rpns = 4.0e1
    elif Mpns_s == '2.8':
        Rpns = 2.0e1
    print( 'Rs: {:}, Omega: {:}'.format \
           ( Rsh[r], 1.0e-3 * np.abs( v[-1] ) / ( Rsh[r] - Rpns ) ) )

    p_GR \
      = np.copy \
          ( p_GR[indGR] \
              / ( rho_GR[indGR_1] * ( v_GR[indGR_1] * 1.0e5 )**2 ) )

    p_NR \
      = np.copy \
          ( p_NR[indNR] \
              / ( rho_NR[indNR_1] * ( v_NR[indNR_1] * 1.0e5 )**2 ) )

    rho_GR = np.copy( rho_GR[indGR] / rho_GR[indGR_1] )
    rho_NR = np.copy( rho_NR[indNR] / rho_NR[indNR_1] )

    v_GR = np.copy( v_GR[indGR] / v_GR[indGR_1] )
    v_NR = np.copy( v_NR[indNR] / v_NR[indNR_1] )

    alpha_N = 1.0 + Phi / ( 2.99792458e10 )**2
    alpha_GR = np.copy( alpha  [indGR] / alpha  [indGR_1] )
    alpha_NR = np.copy( alpha_N[indNR] / alpha_N[indNR_1] )

    etaGR = np.copy( etaGR[indGR] )
    etaNR = np.copy( etaNR[indNR] )

    i += 1

    axs[0,0].plot( etaGR, rho_GR, color = color[i], ls = '-' )
    axs[0,0].plot( etaNR, rho_NR, color = color[i], ls = '--' )

    axs[0,1].plot( etaGR, v_GR, color = color[i], ls = '-' )
    axs[0,1].plot( etaNR, v_NR, color = color[i], ls = '--' )

    axs[1,0].plot( etaGR, p_GR  , color = color[i], ls = '-' )
    axs[1,0].plot( etaNR, p_NR  , color = color[i], ls = '--' )

    axs[1,1].plot( etaGR, alpha_GR, color = color[i], ls = '-', \
             label = r'$\texttt{{GR_{:}}}$'.format( lab[r] ) )
    axs[1,1].plot( etaNR, alpha_NR, color = color[i], ls = '--', \
             label = r'$\texttt{{NR_{:}}}$'.format( lab[r] ) )

xlabel = r'$r \left[\mathrm{km}\right]$'

for i in range( nRows ):
    for j in range( nCols ):
        axs[i,j].set_xscale( 'log' )
        if j == nCols-1:
            axs[i,j].yaxis.set_label_position( 'right' )

top   , ltop    = True , False
left  , lleft   = True , True
bottom, lbottom = True , False
right , lright  = False, False
axs[0,0].tick_params \
  ( which = 'both', \
    top = top, left = left, bottom = bottom, right = right, \
    labeltop    = ltop, \
    labelleft   = lleft, \
    labelright  = lright, \
    labelbottom = lbottom )

top   , ltop    = True , False
left  , lleft   = False, False
bottom, lbottom = True , False
right , lright  = True , True
axs[0,1].tick_params \
  ( which = 'both', \
    top = top, left = left, bottom = bottom, right = right, \
    labeltop    = ltop, \
    labelleft   = lleft, \
    labelright  = lright, \
    labelbottom = lbottom )

top   , ltop    = True , False
left  , lleft   = True , True
bottom, lbottom = True , True
right , lright  = False, False
axs[1,0].tick_params \
  ( which = 'both', \
    top = top, left = left, bottom = bottom, right = right, \
    labeltop    = ltop, \
    labelleft   = lleft, \
    labelright  = lright, \
    labelbottom = lbottom )

top   , ltop    = True , False
left  , lleft   = False, False
bottom, lbottom = True , True
right , lright  = True , True
axs[1,1].tick_params \
  ( which = 'both', \
    top = top, left = left, bottom = bottom, right = right, \
    labeltop    = ltop, \
    labelleft   = lleft, \
    labelright  = lright, \
    labelbottom = lbottom )

for i in range( nRows ):
    for j in range( nCols ):
        axs[i,j].grid( which = 'both', axis = 'x' )
axs[0,0].set_ylabel( ax00ylabel, fontsize = 15 )
axs[0,1].set_ylabel( ax01ylabel, fontsize = 15 )
axs[1,0].set_ylabel( ax10ylabel, fontsize = 15 )
axs[1,1].set_ylabel( ax11ylabel, fontsize = 15 )
fig.supxlabel( xlabel, y = 0.02, fontsize = 15 )
axs[0,0].set_yscale( 'log' )
axs[1,0].set_yscale( 'log' )

axs[1,1].text( 0.625, 0.775, r'$\texttt{{M{:.1f}}}$'.format( Mpns ), \
               transform = axs[1,1].transAxes, fontsize = 14 )

axs[1,1].legend( loc = (0.43,0.10), prop = { 'size' : 10 } )

y11ticks = np.array( [ 0.90, 0.95, 1.00 ], np.float64 )

plt.subplots_adjust( wspace = 0.0, hspace = 0.0 )

#figName = figuresDirectory + 'fig.CompareNRvsGR_SS_M{:}.pdf'.format( Mpns_s )
#plt.savefig( figName, dpi = 300 )
#print( '\n  Saved {:}'.format( figName ) )

#plt.show()

plt.close()

import os
os.system( 'rm -rf __pycache__ ' )
